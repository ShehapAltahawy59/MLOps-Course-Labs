name: Deploy to AWS EC2

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: us-east-1
  AWS_ACCOUNT_ID: "060795916912"  # CHANGE THIS: Replace with your AWS Account ID
  ECR_REPOSITORY: churn-prediction
  # CHANGE THIS: Replace with your name and last 3 digits of phone number
  IMAGE_TAG: shehab-659
  # CHANGE THIS: Your unique project name (this prevents conflicts)
  PROJECT_NAME: shehab-project

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    # Step 1: Checkout code
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # Step 3: Install dependencies and run unit tests
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov

    - name: Run unit tests
      run: |
        # Run tests from main directory (looks for test_*.py files)
        pytest . -v --ignore=venv --ignore=.git
        # Alternative: if you want to run specific test files, use:
        # pytest test_*.py -v

    # Step 4: Configure AWS credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # Step 5: Login to Amazon ECR
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # Step 6: Build and push Docker image to ECR
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      run: |
        # Login to ECR
        aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
        
        # Build the Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        
        # Push the image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Image pushed to $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    # Step 7: Deploy to EC2
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_PRIVATE_KEY }}
        port: 22
        script: |
          # Create directory with your name (CHANGE THIS TO YOUR NAME)
          mkdir -p /home/ubuntu/shehab
          cd /home/ubuntu/shehab
          
          # Remove existing repo if it exists (CHANGE REPO NAME)
          rm -rf MLOps-Course-Labs
          
          # Clone the repository (CHANGE TO YOUR REPO URL)
          git clone https://github.com/ShehapAltahawy59/MLOps-Course-Labs.git
          cd MLOps-Course-Labs
          
          # Configure AWS CLI on EC2
          export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
          export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
          export AWS_DEFAULT_REGION=${{ env.AWS_REGION }}
          
          # Login to ECR from EC2
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          
          # Update docker-compose.yml to use ECR image
           if [ -f docker-compose.yml ]; then
            # Replace 'build: .' with the ECR image
            sed -i "s|build: \.|image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}|g" docker-compose.yml
            # Also handle if there's already an image line for fastapi service
            sed -i "/fastapi:/,/ports:/ s|image: .*|image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}|" docker-compose.yml
          fi
          
          # Stop only YOUR containers using unique project name
          if [ -f docker-compose.yml ]; then
            docker-compose -p ${{ env.PROJECT_NAME }} down
          else
            echo "No docker-compose.yml found, skipping container stop"
          fi
          
          # Pull the latest image and start containers with unique project name
          docker-compose -p ${{ env.PROJECT_NAME }} pull
          docker-compose -p ${{ env.PROJECT_NAME }} up -d
          
          # Show running containers for your project only
          docker-compose -p ${{ env.PROJECT_NAME }} ps
